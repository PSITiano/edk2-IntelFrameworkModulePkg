#/** @file
# Component description file for PS2 keyboard module.
#
# IDE bus driver. This driver will enumerate IDE device and export the blockIo
#  protocol for every device.
# Copyright (c) 2006 - 2007, Intel Corporation
#
#  All rights reserved. This program and the accompanying materials
#  are licensed and made available under the terms and conditions of the BSD License
#  which accompanies this distribution. The full text of the license may be found at
#  http://opensource.org/licenses/bsd-license.php
#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
#
#
#**/

################################################################################
#
# Defines Section - statements that will be processed to create a Makefile.
#
################################################################################
[Defines]
  INF_VERSION                    = 0x00010005
  BASE_NAME                      = IdeBus
  FILE_GUID                      = 69FD8E47-A161-4550-B01A-5594CEB2B2B2
  MODULE_TYPE                    = DXE_DRIVER
  VERSION_STRING                 = 1.0
  EDK_RELEASE_VERSION            = 0x00020000
  EFI_SPECIFICATION_VERSION      = 0x00020000

  ENTRY_POINT                    = InitializeIdeBus

#
# The following information is for reference only and not required by the build tools.
#
#  VALID_ARCHITECTURES           = IA32 X64 IPF EBC
#
#  DRIVER_BINDING                =  gIDEBusDriverBinding                         
#  COMPONENT_NAME                =  gIDEBusComponentName                         
#  Variable Guid C Name: gConfigurationGuid Variable Name: L"Configuration"
#
#

################################################################################
#
# Sources Section - list of files that are required for the build to succeed.
#
################################################################################

[Sources.common]
  DriverDiagnostics.c
  DriverConfiguration.c
  ComponentName.h
  ComponentName.c
  atapi.c
  ata.c
  ide.c
  idebus.c
  idedata.h
  ide.h
  idebus.h


################################################################################
#
# Package Dependency Section - list of Package files that are required for
#                              this module.
#
################################################################################

[Packages]
  MdePkg/MdePkg.dec
  MdeModulePkg/MdeModulePkg.dec
  IntelFrameworkPkg/IntelFrameworkPkg.dec
  


################################################################################
#
# Library Class Section - list of Library Classes that are required for
#                         this module.
#
################################################################################

[LibraryClasses]
  DevicePathLib
  UefiRuntimeServicesTableLib
  UefiBootServicesTableLib
  PerformanceLib
  MemoryAllocationLib
  ReportStatusCodeLib
  BaseMemoryLib
  UefiLib
  BaseLib
  UefiDriverEntryPoint
  DebugLib


################################################################################
#
# Guid C Name Section - list of Guids that this module uses or produces.
#
################################################################################

[Guids]
  gEfiDiskInfoIdeInterfaceGuid                  # SOMETIMES_CONSUMED


################################################################################
#
# Protocol C Name Section - list of Protocol and Protocol Notify C Names
#                           that this module uses or produces.
#
################################################################################

[Protocols]
  gEfiDiskInfoProtocolGuid                      # PROTOCOL BY_START
  gEfiBlockIoProtocolGuid                       # PROTOCOL BY_START
  gEfiIdeControllerInitProtocolGuid             # PROTOCOL TO_START
  gEfiPciIoProtocolGuid                         # PROTOCOL TO_START
  gEfiDevicePathProtocolGuid                    # PROTOCOL TO_START

